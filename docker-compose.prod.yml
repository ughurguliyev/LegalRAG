version: "3.8"

services:
  redis:
    image: redis:7-alpine
    container_name: legal-rag-redis
    restart: always
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - legal-rag-network

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legal-rag-api
    restart: always
    environment:
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CHROMA_API_KEY=${CHROMA_API_KEY}
      - CHROMA_TENANT_ID=${CHROMA_TENANT_ID}
      - CHROMA_DATABASE=${CHROMA_DATABASE}
      - TOKENIZERS_PARALLELISM=false
      - PYTHONUNBUFFERED=1
      # Production settings
      - ENVIRONMENT=production
      - LOG_LEVEL=info
    depends_on:
      - redis
    volumes:
      - ./pdfs:/app/pdfs:ro
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - legal-rag-network
    expose:
      - "8000"

  nginx:
    image: nginx:alpine
    container_name: legal-rag-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
    networks:
      - legal-rag-network
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

  certbot:
    image: certbot/certbot
    container_name: legal-rag-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - legal-rag-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  redis_data:

networks:
  legal-rag-network:
    driver: bridge
